// --------------------------- Parameters -------------------------------------
params {
  // Required parameters
  sample                  = null
  lineage                 = null

  // Optional parameters
  help                    = false
  version                 = '0.1.0'
  outdir                  = 'output'
  fraction                = '0.8,0.9,1.0'
  busco_opts              = ''
  mafft_opts              = '--globalpair --maxiterate 1000 --thread $task.cpus'
  trimal_opts             = '-automated1'
  amas_opts               = '--in-format fasta --data-type aa --part-format nexus --cores $task.cpus'
  iqtree_opts             = '-B 1000 -alrt 1000 -m MFP+MERGE -T $task.cpus'
}


// ---------------------------- Containers ------------------------------------
process {
  container     = "docker://quay.io/asuq1617/busco_phylogenomics:${params.version}"
  errorStrategy = 'retry'
  maxRetries    = 5
  maxErrors     = -1

  shell = ['/bin/bash', '-euo', 'pipefail']

  withLabel: process_single {
    cpus   = { Math.min( 1 * task.attempt, params.max_cpus as int ) }
    memory = { [ 4.GB  * task.attempt,  params.max_memory ].min() }
    time   = { [ 1.h, params.max_time ].min() }
  }

  withLabel: process_low {
    cpus   = { Math.min( 2 * task.attempt, params.max_cpus as int ) }
    memory = { [ 8.GB  * task.attempt,  params.max_memory ].min() }
    time   = { [ 4.h, params.max_time ].min() }
  }

  withLabel: process_medium {
    cpus   = { Math.min( 8 * task.attempt, params.max_cpus as int ) }
    memory = { [ 32.GB * task.attempt,  params.max_memory ].min() }
    time   = { [ 12.h, params.max_time ].min() }
  }

  withLabel: process_high {
    cpus   = { Math.min( 32 * task.attempt, params.max_cpus as int ) }
    memory = { [ 128.GB * task.attempt,  params.max_memory ].min() }
    time   = { [ 24.h, params.max_time ].min() }
  }

  withLabel: process_high_memory {
    cpus   = { Math.min( 8 * task.attempt, params.max_cpus as int ) }
    memory = { [ 128.GB * task.attempt,  params.max_memory ].min() }
    time   = { [ 12.h, params.max_time ].min() }
  }
}


// --------------------------- Singularity engine -----------------------------
singularity {
  enabled     = true
  autoMounts  = true
  cacheDir    = "${baseDir}/.singularity-cache"
  pullTimeout = '100m'
  runOptions  = '--cleanenv'
}


// ------------------------------ Reports -------------------------------------
timeline {
  enabled   = true
  file      = "execution-reports/timeline.html"
  overwrite = true
}

report {
  enabled   = true
  file      = "execution-reports/report.html"
  overwrite = true
}

trace {
  enabled   = true
  file      = "execution-reports/trace.txt"
  overwrite = true
}


// ------------------------------ Misc ----------------------------------------
workDir = "work"
cleanup = true


// ------------------------------ Profiles ------------------------------------
profiles {
  oist {
    includeConfig "./conf/oist.config"
  }

  slurm {
    process.executor = 'slurm'
    executor.queueSize = 2000
  }

  local {
    process.executor      = 'local'
    process {
      withLabel: process_high          { cpus = 4; memory = '16 GB'; time = '6h' }
      withLabel: process_high_memory   { cpus = 8; memory = '32 GB'; time = '12h' }
    }
  }

  debug {
    executor.queueSize = 10
    trace.fields = 'task_id,process,tag,status,hash,cpus,memory,time,realtime,exit,attempt'
  }

  test {
    params.fraction = '1.0'
  }
}